#!/usr/bin/env python3

import argparse
import fcntl
import os
import select
import signal
import sys

BUFSIZ = 8192  # buffer size


def parse_args():
    desc = """\
dumb - tiny logging program.
  Signal SIGUSR1 cause to reopen the logfile.
  Permission of the newly created files will be 640 ('rw-r-----')
  by calling os.umask(0o137) at the start.
"""
    epil = """\
Example of usage:
  Simple usage:
    command | dumb -f test.log
    command | dumb -f test.log -p dumb.pid
  You can rotate log with commands below:
    mv test.log{,.`date +'%Y%m%d%H%M%S'`}; kill -SIGUSR1 `cat dumb.pid`

Hint:
  Set the setgid permission on a log directory:
    mkdir -p ./log && chown root:zabbix ./log && chmod g+s ./log
    command | dumb -f ./log/test.log -p dumb.pid
    mv ./log/test.log{,.`date +'%Y%m%d%H%M%S'`}; kill -SIGUSR1 `cat dumb.pid`
"""
    parser = argparse.ArgumentParser(
            description=desc, epilog=epil,
            formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-f", dest="logpath", required=True,
                        help='Log file path')
    parser.add_argument("-p", dest="pidpath", default=None,
                        help='PID file path')
    return parser.parse_args()


class Context:
    def __init__(self, args):
        self.logfile = None
        self.logpath = args.logpath
        self.pidpath = args.pidpath


flag_signal = 0


def signal_handler(signum, frame):
    global flag_signal
    flag_signal = signum


def main():
    global flag_signal
    args = parse_args()
    ctx = Context(args)
    os.umask(0o137)

    # make stdin non-blocking mode.
    orig_fl = fcntl.fcntl(sys.stdin, fcntl.F_GETFL)
    fcntl.fcntl(sys.stdin, fcntl.F_SETFL, orig_fl | os.O_NONBLOCK)

    # initialize poller object
    sig_mask = (signal.SIGUSR1,)
    signal.signal(sig_mask[0], signal_handler)
    poller = select.poll()
    poller.register(sys.stdin, select.POLLIN)

    try:
        # replace stdin with non-buffering binary mode
        sys.stdin = os.fdopen(sys.stdin.fileno(), 'rb', buffering=0)
        # open logfile first, open pidfile later.
        ctx.logfile = open(ctx.logpath, mode="ab")

        if ctx.pidpath:
            # create pid file
            # Files are automatically flushed when closing them.
            with open(ctx.pidpath, "w") as f:
                f.write("{}\n".format(os.getpid()))

        while True:
            events = poller.poll()
            if len(events) == 0:
                continue
            elif events[0][1] == select.POLLHUP:
                break

            # signal BLOCKING section
            signal.pthread_sigmask(signal.SIG_BLOCK, sig_mask)
            if flag_signal == signal.SIGUSR1:
                # reopen
                ctx.logfile.flush()
                ctx.logfile.close()
                ctx.logfile = None
                ctx.logfile = open(ctx.logpath, mode="ab")

            if events[0][1] | select.POLLIN:
                # read and write
                buf = os.read(sys.stdin.fileno(), BUFSIZ)
                if buf:
                    ctx.logfile.write(buf)
                    ctx.logfile.flush()
            signal.pthread_sigmask(signal.SIG_UNBLOCK, sig_mask)
    except KeyboardInterrupt:
        pass
    finally:
        # remove pidfile first, close logfile later.
        if ctx.pidpath:
            if os.path.exists(ctx.pidpath):
                os.remove(ctx.pidpath)

        if ctx.logfile:
            ctx.logfile.flush()
            ctx.logfile.close()


if __name__ == "__main__":
    main()
